# Your keymap
#
# Atom keymaps work similarly to stylesheets. Just as stylesheets use selectors
# to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# '.editor':
#   'enter': 'editor:newline'
#
# 'body':
#   'ctrl-P': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#

'.workspace .editor':
  'ctrl-w': 'editor:delete-to-beginning-of-word'
  'alt-v': 'core:page-up'
  'alt-V': 'core:select-to-top'
  'ctrl-v': 'core:page-down'
  'ctrl-V': 'core:select-to-bottom'
  'ctrl-cmd-O': 'roben-kleene:open-in-default-application'
  # 'cmd-k e': 'roben-kleene:toggle-emmet'
  'ctrl-alt-f': 'roben-kleene:reveal-in-finder'
  'ctrl-alt-t': 'roben-kleene:open-in-terminal'
  'shift-cmd-space': 'roben-kleene:send-to-launchbar'
  'alt-s': 'roben-kleene:open-scratch-for-scope'
'.tree-view':
  'ctrl-alt-cmd-f': 'tree-view:show-in-file-manager'
  'ctrl-T': 'roben-kleene:open-in-terminal'

# Autocomplete Plus
# ".autocomplete-plus input.hidden-input":
#   "enter": "autocomplete-plus:confirm"
#   'tab': 'unset!'

# Emmet
# '.editor:not(.mini)':
#   'ctrl-alt-right': 'emmet:next-edit-point'
#   'ctrl-alt-left': 'emmet:prev-edit-point'
