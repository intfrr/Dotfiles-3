snippet template "Basic template" b
#!/usr/bin/env bash

set -e
endsnippet
snippet echov "Echo variable"
echo "${1:HOME} = \$$1"
endsnippet
snippet echoa "Echo array variable"
echo "${1:args}[@] = \${$1[@]}"
endsnippet
snippet echoe "Echo error"
echo "${0:Error}" >&2
endsnippet
snippet cds "cd to directory of script"
cd "\$(dirname "\$0")"
endsnippet
snippet noslash "Remove the slash from a variable"
${1:noslash}=\$${0:1}%/
endsnippet
snippet noext "Remove the extension from a path"
${1:noext}=\${${0:1}%.*}
endsnippet
snippet arr "Access array"
\${${1:args}[@]}$0
endsnippet
snippet function "Function" b
${1:my_function}() {
  ${0:echo \$1}
}
endsnippet
snippet if "If statement" b
if ${1:true}; then
  ${0:echo "true"}
fi
endsnippet
snippet ex "Add expression"
[[ ${0:-n "\$1"} ]]
endsnippet
snippet exn "Add negative expression"
[[ ! ${0:-n "\$1"} ]]
endsnippet
snippet testd "True if directory"
-d "${1:\$1}"
endsnippet
snippet testb "Test boolean"
"$${1:value}" == "${0:true}"
endsnippet
snippet testf "True if regular file"
-f "${1:\$1}"
endsnippet
snippet teste "True if file exists"
-e "${1:\$1}"
endsnippet
snippet testl "True if symbolic link"
-L "${1:\$1}"
endsnippet
snippet testneq "True if not equal"
${1:$?} -ne ${0:0}
endsnippet
snippet testeq "True if equal"
${1:$?} -eq ${0:0}
endsnippet
snippet testgt "True if greater than"
${1:$?} -gt ${0:0}
endsnippet
snippet testlt "True if less than"
${1:$?} -lt ${0:0}
endsnippet
snippet testz "True if empty variable"
-z "$${1:1}"
endsnippet
snippet testn "True if not empty variable"
-n "$${1:1}"
endsnippet
snippet tests "True if variable matches string"
"$${1:1}" = "${2:string}"
endsnippet
snippet 1while "While loop one-liner" w
while read i; do { ${0:echo $i} } done
endsnippet
snippet while ""
while read i; do
  ${0:echo $i}
done
endsnippet
snippet for "For loop" b
for i in ${1:*}; do 
  ${0:echo $i}
done
endsnippet
snippet fordir "For loop directories" b
for dir in */; do
  echo $dir;
done
endsnippet
snippet 1for "For loop one-liner" w
for i in ${1:*}; do { ${0:echo $i} } done
endsnippet
snippet 1rename "Rename files in current directory" b
for i in *; do { mv $i \`echo $i | tr '[A-Z]' '[a-z]' | tr ' ' '-'\` } done
endsnippet
snippet exitstatus "Store exit status" b
status=$?
endsnippet
snippet IFS "Change IFS" b
old_IFS=$IFS
IFS="${1: }"
IFS=${old_IFS}
endsnippet
snippet getopts "getopts" b
force="false"
while getopts ":p:fh" option; do
  case "$option" in
    p)
      file_path="$OPTARG"
      ;;
    f)
      force="true"
      ;;
    h)
      echo "Usage: command [-hf] [-p <file_path>]"
      exit 0
      ;;
    :)
      echo "Option -$OPTARG requires an argument" >&2
      exit 1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done
endsnippet
snippet getoptsf "getopts force" b
force=false
while getopts ":fh" option; do
  case "$option" in
    f)
      force=true
      ;;
    h)
      echo "Usage: command [-hf]"
      exit 0
      ;;
    :)
      echo "Option -$OPTARG requires an argument" >&2
      exit 1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done
endsnippet
snippet >n "Redirect STDOUT to null"
>/dev/null
endsnippet
snippet >null "Redirect STDOUT to null"
>/dev/null
endsnippet
snippet >o "Redirect STDERR to STDOUT to null"
2>&1
endsnippet
snippet sete "Exit on non-zero exit status"
set -e
endsnippet
snippet setx "Print each command"
set -x
endsnippet
snippet setop "Any command in pipe fails the whole pipe"
set -x
endsnippet
snippet guardv "Exit on empty variable"
if [[ -z "$${1:1}" ]]; then
  echo "Error: $1 is empty" >&2
  exit 1
fi
endsnippet
