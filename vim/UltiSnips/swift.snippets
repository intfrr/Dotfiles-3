snippet template "Template" b
#!/usr/bin/swift

$0
endsnippet
snippet templatex "Template" b
//
//  `!v expand("%:t")`
//  `!v expand("%:h")`
//
//  Created by Roben Kleene on `date +%-m/%-d/%y`.
//  Copyright (c) `date +%Y` Roben Kleene. All rights reserved.
//

$0
endsnippet
snippet delegate "Delegate" b
protocol ${1:MyClass}Delegate {
    func ${2:handleEvent}(for: $1})
    func ${1/.*/\l$0/}(_  ${1/.*/\l$0/}: $1, ${3:valueForKey} ${4:key}: ${5:String}) -> ${6:Any}
}
endsnippet
snippet weakself "Weak self, strong self" b
guard let \`self\` = self else { return }
endsnippet
snippet protocol "Protocol" b
protocol ${1:MyType} {
    $0
}
endsnippet
snippet uiviewcontroller "View Controller" b
//
//  `!v expand("%:t")`
//  `!v expand("%:h")`
//
//  Created by Roben Kleene on `date +%-m/%-d/%y`.
//  Copyright (c) `date +%Y` Roben Kleene. All rights reserved.
//

import UIKit

class `!v expand("%:t:r")`: UIViewController {
    $0
}
endsnippet
snippet log "Log" b
NSLog("$0")
endsnippet
snippet logv "Log variable" b
NSLog("${1:variable} = \($1)")
endsnippet
snippet printv "Print variable" b
print("${1:variable} = \($1)")
endsnippet
snippet print "Print" b
print("$0")
endsnippet
snippet class "Class" b
class ${1:MyObject} {
    $0
}
endsnippet
snippet dotry "Try-Catch" b
do {
    try ${1:canThrowErrors()}
} catch let error as NSError {
    throw error
}
endsnippet
snippet expectation "Expectation" b
let ${1:expect} = expectation(description: "${2:Expectation}")
$1.fulfill()
waitForExpectations(timeout: ${3:1.0}, handler: nil)
endsnippet
snippet do "Do-Catch Visual" b
do {
    ${1:${VISUAL:try someThrowingFunction()/try!/try/g}}
} catch {
    ${2:print("Error")}
}
endsnippet
