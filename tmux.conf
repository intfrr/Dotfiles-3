# Settings

# This makes cut and paste with the mouse strange, but it makes scrolling no-op
# at a prompt instead of going through history, which is good.
# set -g mouse on

# Fix colors, shell colors are off without this, specifying `xterm` doesn't work with tmux
# Handled by sensible
# set -g default-terminal "screen-256color"

# Send shift arrow keys (`vim-tmux-navigator` won't work without this)
set-option -g xterm-keys on

# increase scrollback lines
# Handled by sensible
# set -g history-limit 10000

# Remove delay
# Handled by sensible
# set -s escape-time 1

# Don't enforce size of smallest window
# Handled by sensible
# setw -g aggressive-resize on

# Required for `vim-tmux-clipboard`
set -g focus-events on

# At some point tmux started renaming windows based on process after every 
# command, even if it had already been renamed. This makes manual names stick.
set-option -g allow-rename off

# UI

# This is an ugly fix for the prompt becoming messed up when resizing
# in fish
# set-hook -g 'client-resized' 'send-keys "^L"'
# Remove administrative debris (session name, hostname, time) in status bar
set -g status-right ''
# Increase the max length of the left status
set -g status-left-length 40

# Show window activity
# Current disabled because Neovim is constantly showing output
# set -g visual-activity on
# setw -g monitor-activity on


# Colors
# Available Colors
# black, red, green, yellow, blue, magenta, cyan, white
# And (colortest.pl):
# colour0-colour255

# Status
set -g status-bg default
set -g status-fg '#aaaaaa'
# Active window
setw -g window-status-current-fg cyan
setw -g window-status-activity-fg green
# Messages
set -g message-bg default
set -g message-fg white
# Panes
set -g pane-border-fg colour236
set -g pane-active-border-fg cyan
# Selection
set -g mode-bg cyan
set -g mode-fg black


# Bindings

# Prefix, this is important because C-b is page up in Vim
unbind C-b
# `C-space` is start selection in emacs
# set-option -g prefix C-Space
# `C-q` Conflicts with `C-x C-q` for `dired-toggle-read-only`
# It also conflicts with `C-q` for `quoted insert`
set-option -g prefix C-q
bind-key C-q send-prefix
# `C-\` is hard to type on Apple keyboards
# set-option -g prefix 'C-\'

# Split commands use current path
# * `pane_current_path` doesn't work when vim is opened from a subprocess, e.g, 
# `fzf | xargs -o vim`.
# * `$PWD` uses where the vim session was started from instead of the current
# directory, so `pane_current_path` is preferable
# bind-key % split-window -h -c "$PWD"
# bind-key '"' split-window -c "$PWD"
# bind-key c new-window -c "$PWD"
bind-key % split-window -h -c "#{pane_current_path}"
bind-key v split-window -h -c "#{pane_current_path}"
bind-key '"' split-window -c "#{pane_current_path}"
bind-key s split-window -c "#{pane_current_path}"
# bind-key c new-window -a -c "#{pane_current_path}"
bind-key t new-window -a -c "#{pane_current_path}"
bind-key M-n next-window
bind-key M-p previous-window
bind-key T break-pane
# unbind-key c
bind-key c kill-pane
# bind-key C-w run-shell "tmux list-windows -F \"##I:##W\" | fzf-tmux | cut -d \":\" -f 1 | xargs tmux select-window -t"

# vim style splits
# Don't use vim style bindings because `<prefix>c` is already taken for
# creatining a window, and therefore can't be used to close a split. Without
# `<prefix>c` it's too hard to keep track of which vim bindings work.
# bind-key v split-window -h -c "#{pane_current_path}"
# bind-key s split-window -c "#{pane_current_path}"
# bind-key o kill-pane -a
bind-key C-l last-window

# Init
bind-key i source-file ~/.tmux.conf \; display "Sourced"

# Next Pane
# Note this doesn't work for some reason, it gets overwritten by tmux as
# `send-prefix`, so instead this binding is set on shell startup
# bind-key 'C-\' select-pane -t :.+
# bind-key C-q select-pane -t :.+
bind-key C-w select-pane -t :.+
bind-key w select-pane -t :.+
# Couldn't figure out how to get this to work
# set -g prefix2 C-S-Space
# bind-key -n C-S-Space select-pane -t :.-

# Synchronize
bind-key M-s set-window-option synchronize-panes \; display "Synchronize toggled"

# Windows
# Make default window commands repeatable
# bind-key -r p previous-window
# bind-key -r n next-window
# Learn new tab bindings for these
# unbind-key p
# unbind-key n
# bind-key -r C-p previous-window
# bind-key -r C-n next-window
# vim-ish tab bindings
# bind-key -r T previous-window
# bind-key -r t next-window
# Switching Session
# This doesn't work for some reason, probably switch sessions is never
# repeatable
# bind-key -r ( switch-client -p
# bind-key -r ) switch-client -n

# Movement
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
bind-key M-h select-pane -L
bind-key M-j select-pane -D
bind-key M-k select-pane -U
bind-key M-l select-pane -R

# Resize
bind-key H resize-pane -L 5
bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key L resize-pane -R 5

# Vim Style Editing Keys
setw -g mode-keys vi

# Copy Mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe "pbcopy" \; send-keys -X clear-selection
# If `copy-pipe-and-cancel` is used that makes it difficult to copy multiple
# selections to a different `tmux` panes.
# bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
# bind-key -T copy-mode-vi Escape send-keys -X cancel
# Make search incremental
bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""
#
# bind-key -T copy-mode-vi / command-prompt -p "search down" "send -X search-forward-incremental \"%%%\""
# bind-key -T copy-mode-vi ? command-prompt -p "search up" "send -X search-backward-incremental \"%%%\""
# This version probably only uses `tmux` internal clipboard
# bind-key -t vi-copy 'y' copy-selection
# Sensible sets `emacs-edit` for command line
# Not sure why this doesn't work
# bind-key -t emacs-edit M-BSpace delete-word
# bind-key -t emacs-edit C-g cancel

# `u` for username & up
bind-key u copy-mode \; send -X search-backward "$USER@" \; \
	send-key -X search-again
# bind-key g copy-mode \; send -X search-backward "$USER@" \; \
# 	send-key -X search-again
bind-key C-b copy-mode -u
bind-key b copy-mode -u

# Map Escape to cancel when using the search box
# Looks like this words by default as of `tmux 2.4`
# bind-key -T edit-mode-vi Escape send-keys -X cancel

# Plugins
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

# Set after tmux resurrect because both use `C-r`
bind-key C-r copy-mode \; \
	command-prompt -i -p "search up" \
	"send -X search-backward-incremental \"%%%\""
# Vim-style search
bind-key ? copy-mode \; \
	command-prompt -i -p "search up" \
	"send -X search-backward-incremental \"%%%\""
bind-key B list-keys
unbind-key C-s
bind-key C-s choose-tree
bind-key M-s run-shell "~/.tmux/plugins/tmux-resurrect/scripts/save.sh"
bind-key M-r run-shell "~/.tmux/plugins/tmux-resurrect/scripts/restore.sh"

# Platform
if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux-osx.conf'
